function InstrumentSelectMenu(~,~,data_object,gui_object)
    % create the instrument select menu
    
    % get structs from objects
    data=guidata(data_object);
    gui=guidata(gui_object);
    
    % create window for 'Show Instruments' with instruments
    % and properties. checks if already open
    InstrumentSelectMenuNumber=502;
    if ishandle(InstrumentSelectMenuNumber)
        warndlg('already open!','Error!')
        return
    end

    % loop on connected instruments
    all=1:length(data.Instruments);
    if any(data.Connected)
        instnames=cell([1,sum(data.Connected)]);
        ind=1;
        for i=all(data.Connected==1)
            instnames{ind}=data.Instruments{i}{1};
            ind=ind+1;
        end
    else
        instnames='No Instruments Connected';
    end

    % create the window
    gui.instrumentWindow=figure(InstrumentSelectMenuNumber);
    set(gui.instrumentWindow,...
        'Name', 'Instruments', ...
        'NumberTitle', 'off', ...
        'MenuBar', 'none', ...
        'Toolbar', 'none', ...
        'Position', [530 450 300 310], ...
        'HandleVisibility', 'off'  );

    % create main layout
    instrumentLayout = uiextras.VBox( 'Parent', gui.instrumentWindow, ...
        'Padding', 3, 'Spacing', 3 );

    % create buttons
    instrumentNameLayout = uiextras.HBox( 'Parent', instrumentLayout, ...
        'Padding', 3, 'Spacing', 3 );
    uicontrol( 'Style', 'text', ...
        'Parent', instrumentNameLayout, ...
        'String', 'Instrument:');
    gui.InstrumentsPopup = uicontrol( 'Style', 'popupmenu', ...
        'BackgroundColor', 'w', ...
        'Parent', instrumentNameLayout, ...
        'String', instnames);

    gui.SetMenuButton=uicontrol( 'Style', 'PushButton', ...
        'Parent', instrumentNameLayout, ...
        'String', 'Set');

    instrumentInterfaceLayout = uiextras.HButtonBox( 'Parent', instrumentLayout, ...
        'Padding', 3, 'Spacing', 3 );
    uicontrol( 'Style', 'text', ...
        'Parent', instrumentInterfaceLayout, ...
        'String', 'Interface' );
    gui.InterfaceDescriptionText = uicontrol( 'Style', 'text', ...
        'BackgroundColor', 'w', ...
        'Parent', instrumentInterfaceLayout, ...
        'String', 'GPIB' );

    instrumentAdressLayout = uiextras.HButtonBox( 'Parent', instrumentLayout, ...
        'Padding', 3, 'Spacing', 3 );
    uicontrol( 'Style', 'text', ...
        'Parent', instrumentAdressLayout, ...
        'String', 'Address' );
    gui.AdressDescriptionText = uicontrol( 'Style', 'text', ...
        'BackgroundColor', 'w', ...
        'Parent', instrumentAdressLayout, ...
        'String', '24' );

    DeviceMeasureLayout = uiextras.VBox( 'Parent', instrumentLayout, ...
        'Padding', 3, 'Spacing', 3 );
    uicontrol( 'Style', 'text', ...
        'Parent', DeviceMeasureLayout, ...
        'String', 'Measurable properties:' );
    gui.DeviceMeasureList=uicontrol( 'Style', 'list', ...
        'Parent', DeviceMeasureLayout, ...
        'String', '');
    set( DeviceMeasureLayout, 'Sizes', [-1,-4]  );
    
    DeviceSweepLayout = uiextras.VBox( 'Parent', instrumentLayout, ...
        'Padding', 3, 'Spacing', 3 );
    uicontrol( 'Style', 'text', ...
        'Parent', DeviceSweepLayout, ...
        'String', 'Sweepable properties:' );
    gui.DeviceSweepList=uicontrol( 'Style', 'list', ...
        'Parent', DeviceSweepLayout, ...
        'String', '');
    set( DeviceSweepLayout, 'Sizes', [-1,-4]  );
    
    % arrange gui
    set( instrumentLayout, 'Sizes', [-1,-1,-1,-3,-3]  );
    
    % update info
    Insterface(gui.InstrumentsPopup,0,data,gui)
    
    % update data and gui objects
    guidata(data_object,data);
    guidata(gui_object,gui);
    
    % set callbacks
    set(gui.InstrumentsPopup,'Callback', {@Insterface,data,gui});
    set(gui.SetMenuButton,'Callback', {@SetInstrumentMenu,data_object,gui_object});
end